# -*- coding: utf-8 -*-
"""Sir Hamza Python Assignment1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TzTihzAJXvIfGmq0ug4oH9WPxEuhJMOW

#**LIST METHODS Assignment** 1 &2:
"""

# Task 1: Create and Modify Lists

# Create a list called fruits
fruits = ["watermelon", "chikoo", "pineapple"]

# Add "grape" to the end of the list
fruits.append("lychee")

# Insert "mango" at position 2 in the list
fruits.insert(2, "kiwi")

# Remove "banana" from the list
fruits.remove("chikoo")

# Print the final list
print(fruits)

# Creating lists
numbers = [10, 20, 30, 40, 50]
more_numbers = [60, 70, 80]

# Combining both lists
all_numbers = numbers + more_numbers

# Making a copy of all_numbers
numbers_copy = all_numbers.copy()

# Reversing the copy
numbers_copy.reverse()

# Printing both lists
print("All Numbers:", all_numbers)
print("Reversed Copy:", numbers_copy)

# Create the scores list
scores = [85, 92, 78, 65, 92, 85, 74]

# Sort in ascending order
scores_asc = sorted(scores)

# Sort in descending order
scores_desc = sorted(scores, reverse=True)

# Count how many times 92 appears
count_92 = scores.count(92)

# Find the highest and lowest scores
highest = max(scores)
lowest = min(scores)

# Print results
print("Original Scores:", scores)
print("Sorted Ascending:", scores_asc)
print("Sorted Descending:", scores_desc)
print("92 appears", count_92, "times.")
print("Highest Score:", highest)
print("Lowest Score:", lowest)

# Create the list
letters = ["a", "b", "c", "d", "e"]

# Slice to get first three letters
first_three = letters[:3]

# Slice to get last two letters
last_two = letters[-2:]

# Find index of "c"
index_c = letters.index("c")

# Replace "d" with "z"
letters[3] = "z"

# Print everything
print("First three letters:", first_three)
print("Last two letters:", last_two)
print("Index of 'c':", index_c)
print("Modified list:", letters)

"""#**DICTIONARY Assignment**"""

# T1: Create and Access Dictionaries

# Creating the dictionary
student = {
    "name": "John",
    "age": 20,
    "grade": "A",
    "courses": ["Math", "Science", "History"]
}

# Access and print the student's name
print("Name:", student["name"])

# Print the list of courses
print("Courses:", student["courses"])

# Add a new key-value pair
student["email"] = "john@example.com"

# Print the entire dictionary
print("Full Student Dictionary:", student)

#T2 Original student dictionary
student = {
    "name": "John",
    "age": 20,
    "grade": "A",
    "courses": ["Math", "Science", "History"],
    "email": "john@example.com"
}

# Modify Dictionary Values
student["age"] = 21  # Change age to 21
student["courses"].append("Computer Science")  # Add new course
student["grade"] = "A+"  # Update grade

# Print the modified dictionary
print("Modified Student Dictionary:", student)

#T3 Existing student dictionary
student = {
    "name": "John",
    "age": 21,
    "grade": "A+",
    "courses": ["Math", "Science", "History", "Computer Science"],
    "email": "john@example.com"
}

# Second dictionary with address info
student_address = {
    "street": "123 College Ave",
    "city": "New York",
    "zip": "10001"
}

# Combine both dictionaries into a new one
student_info = {**student, **student_address}

# Remove the "zip" key
student_info.pop("zip", None)

# Check if "phone" key exists
has_phone = "phone" in student_info
print("Phone key exists:", has_phone)

# Print the final dictionary
print("Final Student Info Dictionary:")
print(student_info)

#T4 Create the dictionary
word_count = {
    "hello": 5,
    "world": 10,
    "python": 15
}

# Get all keys and print them as a list
keys_list = list(word_count.keys())
print("Keys:", keys_list)

# Get all values and print them as a list
values_list = list(word_count.values())
print("Values:", values_list)

# Get all key-value pairs and print them
items_list = list(word_count.items())
print("Key-Value Pairs:", items_list)

# Make a copy of the dictionary
word_count_copy = word_count.copy()

# Clear the original dictionary
word_count.clear()

# Print both dictionaries to verify
print("Original Dictionary (after clear):", word_count)
print("Copied Dictionary:", word_count_copy)

"""#**LIST Assignment**"""

#T1 Initial variables
purchase_amount = 250  # Total shopping cart cost
is_loyalty_member = True  # Customer is a loyalty member
day_of_week = "Tuesday"  # Current day
is_holiday_season = True  # It's holiday season

# Starting final price is the same as purchase amount
final_price = purchase_amount

# Apply a 10% discount if customer is a loyalty member
if is_loyalty_member:
    discount = final_price * 0.10
    final_price -= discount
    print("Loyalty member discount applied: -", discount)

# Apply a 5% discount if it's Tuesday
if day_of_week == "Tuesday":
    discount = final_price * 0.05
    final_price -= discount
    print("ðŸ“… Tuesday discount applied: -", discount)

# Apply a 15% discount if it's holiday season
if is_holiday_season:
    discount = final_price * 0.15
    final_price -= discount
    print("Holiday season discount applied: -", discount)

# Print the final amount after all discounts
print("Final price to pay: $", round(final_price, 2))

#T2
purchase_amount = 120
is_loyalty_member = True
day_of_week = "Sunday"
is_holiday_season = True

# Start with original price
final_price = purchase_amount

# Apply base discount based on purchase amount
if purchase_amount > 100:
    discount = final_price * 0.10
    final_price -= discount
    print("10% discount for purchases over $100: -", discount)

elif purchase_amount > 50:
    discount = final_price * 0.05
    final_price -= discount
    print("5% discount for purchases over $50: -", discount)

# Loyalty member discount
if is_loyalty_member:
    discount = final_price * 0.05
    final_price -= discount
    print("Loyalty member extra 5% discount: -", discount)

# Weekend discount
if day_of_week == "Saturday" or day_of_week == "Sunday":
    discount = final_price * 0.02
    final_price -= discount
    print("Weekend extra 2% discount: -", discount)

# Holiday season discount
if is_holiday_season:
    discount = final_price * 0.08
    final_price -= discount
    print("Holiday season extra 8% discount: -", discount)

# Final output
print("Final price to pay: $", round(final_price, 2))

#T4
purchase_amount = 120
is_loyalty_member = True
day_of_week = "Sunday"
is_holiday_season = True

# Store original amount
print("Original Purchase Amount: $", purchase_amount)

# Start with original price
final_price = purchase_amount

# Apply base discount based on purchase amount
if purchase_amount > 100:
    discount = final_price * 0.10
    final_price -= discount
    print("10% discount for purchases over $100: -$", round(discount, 2))

elif purchase_amount > 50:
    discount = final_price * 0.05
    final_price -= discount
    print("5% discount for purchases over $50: -$", round(discount, 2))

# Loyalty member discount
if is_loyalty_member:
    discount = final_price * 0.05
    final_price -= discount
    print("Loyalty member extra 5% discount: -$", round(discount, 2))

# Weekend discount
if day_of_week == "Saturday" or day_of_week == "Sunday":
    discount = final_price * 0.02
    final_price -= discount
    print("Weekend extra 2% discount: -$", round(discount, 2))

# Holiday season discount
if is_holiday_season:
    discount = final_price * 0.08
    final_price -= discount
    print("Holiday season extra 8% discount: -$", round(discount, 2))

# Final output
print("Final Price After All Discounts: $", round(final_price, 2))

"""#**FOR LOOPS Assignment**"""

# Pattern 1: Counting Numbers
print("Pattern 1: Counting Numbers")
for i in range(1, 11):
    print(i, end=" ")  # Print numbers from 1 to 10 on a single line
print()  # Move to the next line

# Pattern 2: Multiplication Table for the number 5
print("\nPattern 2: Multiplication Table for 5")
for i in range(1, 11):
    print(f"5 x {i} = {5 * i}")

"""#**WHILE LOOPS Assignment**"""

import random

# 1. Set the secret number (random number between 1 and 50)
secret_number = random.randint(1, 50)

# 2. Initialize variables
guesses_taken = 0
correct_guess = False

# 3. Start the game
print("Welcome to the Number Guessing Game!")
print("I'm thinking of a number between 1 and 50.")

while not correct_guess:
    # Ask the player to guess the number
    guess = int(input("Enter your guess: "))
    guesses_taken += 1  # Increment the guess count

    # 4. Check if the guess is correct, too high, or too low
    if guess < secret_number:
        print("Too low! Try again.")
    elif guess > secret_number:
        print("Too high! Try again.")
    else:
        # 5. The guess is correct
        print(f"Congratulations! You guessed the correct number {secret_number} in {guesses_taken} guesses!")
        correct_guess = True

"""#**STUDENT GRADE MANAGEMENT SYSTEM Assignment**"""

# List to store information about students
students = []

# Function to add a new student
def add_student(name, student_id, grades):
    student = {
        "name": name,
        "id": student_id,
        "grades": grades
    }
    students.append(student)

# Function to calculate the average grade for a student
def calculate_average(grades):
    total = sum(grades.values())
    return total / len(grades)

# Function to display all students with their grades
def display_students():
    for student in students:
        print(f"Name: {student['name']}")
        print(f"ID: {student['id']}")
        print("Grades:")
        for course, grade in student['grades'].items():
            print(f"  {course}: {grade}")
        print()

# Function to find the student with the highest average grade
def student_with_highest_average():
    highest_avg = 0
    top_student = None
    for student in students:
        avg = calculate_average(student['grades'])
        if avg > highest_avg:
            highest_avg = avg
            top_student = student
    return top_student

# Function to list all students with an average grade above 80
def students_above_80():
    for student in students:
        avg = calculate_average(student['grades'])
        if avg > 80:
            print(f"Name: {student['name']}, Average Grade: {avg:.2f}")

# Function to calculate the average grade for a specific course
def average_grade_for_course(course):
    total = 0
    count = 0
    for student in students:
        if course in student['grades']:
            total += student['grades'][course]
            count += 1
    if count > 0:
        return total / count
    return None

# Add some students to the list
add_student("John Doe", "S123", {"Math": 90, "Science": 85, "History": 88})
add_student("Jane Smith", "S124", {"Math": 78, "Science": 80, "History": 75})
add_student("Tom Brown", "S125", {"Math": 85, "Science": 92, "History": 89})

# Display all students and their grades
print("All Students with Grades:\n")
display_students()

# Calculate and display the average grade for each student
print("Average Grades for Each Student:")
for student in students:
    avg = calculate_average(student['grades'])
    print(f"{student['name']}: {avg:.2f}")

# Find and display the student with the highest average grade
top_student = student_with_highest_average()
print(f"\nStudent with the Highest Average Grade: {top_student['name']} with {calculate_average(top_student['grades']):.2f}")

# List all students with an average grade above 80
print("\nStudents with Average Grade Above 80:")
students_above_80()

# Calculate and display the average grade for a specific course
course = "Math"
course_avg = average_grade_for_course(course)
if course_avg is not None:
    print(f"\nAverage Grade for {course}: {course_avg:.2f}")
else:
    print(f"\nNo grades available for {course}.")